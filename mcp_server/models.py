# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T11:57:44+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, confloat, conint, constr


class AccessDeniedException(RootModel[Any]):
    root: Any


class AgentHealth(Enum):
    HEALTHY = 'HEALTHY'
    UNHEALTHY = 'UNHEALTHY'
    UNKNOWN = 'UNKNOWN'


class AgentHealthCode(Enum):
    IDLE = 'IDLE'
    RUNNING = 'RUNNING'
    SHUTDOWN = 'SHUTDOWN'
    UNHEALTHY = 'UNHEALTHY'
    THROTTLED = 'THROTTLED'
    UNKNOWN = 'UNKNOWN'


class AgentHealthCodeList(RootModel[List[AgentHealthCode]]):
    root: List[AgentHealthCode] = Field(..., max_length=10, min_length=0)


class AgentHealthList(RootModel[List[AgentHealth]]):
    root: List[AgentHealth] = Field(..., max_length=10, min_length=0)


class AgentId(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class AgentIdList(RootModel[List[AgentId]]):
    root: List[AgentId] = Field(..., max_length=99, min_length=0)


class AgentVersion(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class AgentsAlreadyRunningAssessmentException(RootModel[Any]):
    root: Any


class AmiId(RootModel[constr(min_length=0, max_length=256)]):
    root: constr(min_length=0, max_length=256)


class Arn(RootModel[constr(min_length=1, max_length=300)]):
    root: constr(min_length=1, max_length=300)


class ArnCount(RootModel[int]):
    root: int


class AssessmentRulesPackageArnList(RootModel[List[Arn]]):
    root: List[Arn] = Field(..., max_length=50, min_length=1)


class AssessmentRunDuration(RootModel[conint(ge=180, le=86400)]):
    root: conint(ge=180, le=86400)


class AssessmentRunInProgressException(RootModel[Any]):
    root: Any


class AssessmentRunName(RootModel[constr(min_length=1, max_length=140)]):
    root: constr(min_length=1, max_length=140)


class AssessmentRunNotificationSnsStatusCode(Enum):
    SUCCESS = 'SUCCESS'
    TOPIC_DOES_NOT_EXIST = 'TOPIC_DOES_NOT_EXIST'
    ACCESS_DENIED = 'ACCESS_DENIED'
    INTERNAL_ERROR = 'INTERNAL_ERROR'


class AssessmentRunState(Enum):
    CREATED = 'CREATED'
    START_DATA_COLLECTION_PENDING = 'START_DATA_COLLECTION_PENDING'
    START_DATA_COLLECTION_IN_PROGRESS = 'START_DATA_COLLECTION_IN_PROGRESS'
    COLLECTING_DATA = 'COLLECTING_DATA'
    STOP_DATA_COLLECTION_PENDING = 'STOP_DATA_COLLECTION_PENDING'
    DATA_COLLECTED = 'DATA_COLLECTED'
    START_EVALUATING_RULES_PENDING = 'START_EVALUATING_RULES_PENDING'
    EVALUATING_RULES = 'EVALUATING_RULES'
    FAILED = 'FAILED'
    ERROR = 'ERROR'
    COMPLETED = 'COMPLETED'
    COMPLETED_WITH_ERRORS = 'COMPLETED_WITH_ERRORS'
    CANCELED = 'CANCELED'


class AssessmentRunStateList(RootModel[List[AssessmentRunState]]):
    root: List[AssessmentRunState] = Field(..., max_length=50, min_length=0)


class AssessmentTargetName(RootModel[constr(min_length=1, max_length=140)]):
    root: constr(min_length=1, max_length=140)


class AssessmentTemplateName(RootModel[constr(min_length=1, max_length=140)]):
    root: constr(min_length=1, max_length=140)


class AssessmentTemplateRulesPackageArnList(RootModel[List[Arn]]):
    root: List[Arn] = Field(..., max_length=50, min_length=0)


class AssetType(Enum):
    ec2_instance = 'ec2-instance'


class AttributeKey(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class AttributeValue(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class AutoScalingGroup(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class AutoScalingGroupList(RootModel[List[AutoScalingGroup]]):
    root: List[AutoScalingGroup] = Field(..., max_length=20, min_length=0)


class BatchDescribeArnList(RootModel[List[Arn]]):
    root: List[Arn] = Field(..., max_length=10, min_length=1)


class BatchDescribeExclusionsArnList(RootModel[List[Arn]]):
    root: List[Arn] = Field(..., max_length=100, min_length=1)


class Bool(RootModel[bool]):
    root: bool


class CreateAssessmentTargetRequest(BaseModel):
    assessmentTargetName: AssessmentTargetName
    resourceGroupArn: Optional[Arn] = None


class CreateAssessmentTargetResponse(BaseModel):
    assessmentTargetArn: Arn


class CreateAssessmentTemplateResponse(BaseModel):
    assessmentTemplateArn: Arn


class CreateExclusionsPreviewRequest(BaseModel):
    assessmentTemplateArn: Arn


class CreateResourceGroupResponse(BaseModel):
    resourceGroupArn: Arn


class DeleteAssessmentRunRequest(BaseModel):
    assessmentRunArn: Arn


class DeleteAssessmentTargetRequest(BaseModel):
    assessmentTargetArn: Arn


class DeleteAssessmentTemplateRequest(BaseModel):
    assessmentTemplateArn: Arn


class DescribeAssessmentRunsRequest(BaseModel):
    assessmentRunArns: BatchDescribeArnList


class DescribeAssessmentTargetsRequest(BaseModel):
    assessmentTargetArns: BatchDescribeArnList


class DescribeAssessmentTemplatesRequest(BaseModel):
    assessmentTemplateArns: BatchDescribeArnList


class DescribeResourceGroupsRequest(BaseModel):
    resourceGroupArns: BatchDescribeArnList


class DurationRange(BaseModel):
    maxSeconds: Optional[AssessmentRunDuration] = None
    minSeconds: Optional[AssessmentRunDuration] = None


class FailedItemErrorCode(Enum):
    INVALID_ARN = 'INVALID_ARN'
    DUPLICATE_ARN = 'DUPLICATE_ARN'
    ITEM_DOES_NOT_EXIST = 'ITEM_DOES_NOT_EXIST'
    ACCESS_DENIED = 'ACCESS_DENIED'
    LIMIT_EXCEEDED = 'LIMIT_EXCEEDED'
    INTERNAL_ERROR = 'INTERNAL_ERROR'


class FilterRulesPackageArnList(RootModel[List[Arn]]):
    root: List[Arn] = Field(..., max_length=50, min_length=0)


class FindingCount(RootModel[int]):
    root: int


class FindingId(RootModel[constr(min_length=0, max_length=128)]):
    root: constr(min_length=0, max_length=128)


class GetTelemetryMetadataRequest(BaseModel):
    assessmentRunArn: Arn


class Hostname(RootModel[constr(min_length=0, max_length=256)]):
    root: constr(min_length=0, max_length=256)


class InspectorEvent(Enum):
    ASSESSMENT_RUN_STARTED = 'ASSESSMENT_RUN_STARTED'
    ASSESSMENT_RUN_COMPLETED = 'ASSESSMENT_RUN_COMPLETED'
    ASSESSMENT_RUN_STATE_CHANGED = 'ASSESSMENT_RUN_STATE_CHANGED'
    FINDING_REPORTED = 'FINDING_REPORTED'
    OTHER = 'OTHER'


class InternalException(RootModel[Any]):
    root: Any


class InvalidCrossAccountRoleException(RootModel[Any]):
    root: Any


class InvalidInputException(RootModel[Any]):
    root: Any


class IocConfidence(RootModel[conint(ge=0, le=10)]):
    root: conint(ge=0, le=10)


class Ipv4Address(RootModel[constr(min_length=7, max_length=15)]):
    root: constr(min_length=7, max_length=15)


class Ipv4AddressList(RootModel[List[Ipv4Address]]):
    root: List[Ipv4Address] = Field(..., max_length=50, min_length=0)


class KernelVersion(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class LimitExceededException(RootModel[Any]):
    root: Any


class ListEventSubscriptionsMaxResults(RootModel[int]):
    root: int


class ListMaxResults(RootModel[int]):
    root: int


class ListParentArnList(RootModel[List[Arn]]):
    root: List[Arn] = Field(..., max_length=50, min_length=0)


class ListReturnedArnList(RootModel[List[Arn]]):
    root: List[Arn] = Field(..., max_length=100, min_length=0)


class ListTagsForResourceRequest(BaseModel):
    resourceArn: Arn


class Locale(Enum):
    EN_US = 'EN_US'


class Long(RootModel[int]):
    root: int


class Message(RootModel[constr(min_length=0, max_length=1000)]):
    root: constr(min_length=0, max_length=1000)


class MessageType(RootModel[constr(min_length=1, max_length=300)]):
    root: constr(min_length=1, max_length=300)


class NamePattern(RootModel[constr(min_length=1, max_length=140)]):
    root: constr(min_length=1, max_length=140)


class NoSuchEntityException(RootModel[Any]):
    root: Any


class NumericSeverity(RootModel[confloat(ge=0.0, le=10.0)]):
    root: confloat(ge=0.0, le=10.0)


class NumericVersion(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class OperatingSystem(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class PaginationToken(RootModel[constr(min_length=1, max_length=300)]):
    root: constr(min_length=1, max_length=300)


class PreviewAgentsMaxResults(RootModel[int]):
    root: int


class PreviewAgentsRequest(BaseModel):
    maxResults: Optional[PreviewAgentsMaxResults] = None
    nextToken: Optional[PaginationToken] = None
    previewAgentsArn: Arn


class PreviewGenerationInProgressException(RootModel[Any]):
    root: Any


class PreviewStatus(Enum):
    WORK_IN_PROGRESS = 'WORK_IN_PROGRESS'
    COMPLETED = 'COMPLETED'


class ProviderName(RootModel[constr(min_length=0, max_length=1000)]):
    root: constr(min_length=0, max_length=1000)


class RegisterCrossAccountAccessRoleRequest(BaseModel):
    roleArn: Arn


class ReportFileFormat(Enum):
    HTML = 'HTML'
    PDF = 'PDF'


class ReportStatus(Enum):
    WORK_IN_PROGRESS = 'WORK_IN_PROGRESS'
    FAILED = 'FAILED'
    COMPLETED = 'COMPLETED'


class ReportType(Enum):
    FINDING = 'FINDING'
    FULL = 'FULL'


class RuleName(RootModel[constr(max_length=1000)]):
    root: constr(max_length=1000)


class RuleNameList(RootModel[List[RuleName]]):
    root: List[RuleName] = Field(..., max_length=50, min_length=0)


class RulesPackageName(RootModel[constr(min_length=0, max_length=1000)]):
    root: constr(min_length=0, max_length=1000)


class ScopeType(Enum):
    INSTANCE_ID = 'INSTANCE_ID'
    RULES_PACKAGE_ARN = 'RULES_PACKAGE_ARN'


class ScopeValue(RootModel[str]):
    root: str


class ServiceName(RootModel[constr(min_length=0, max_length=128)]):
    root: constr(min_length=0, max_length=128)


class ServiceTemporarilyUnavailableException(RootModel[Any]):
    root: Any


class Severity(Enum):
    Low = 'Low'
    Medium = 'Medium'
    High = 'High'
    Informational = 'Informational'
    Undefined = 'Undefined'


class SeverityList(RootModel[List[Severity]]):
    root: List[Severity] = Field(..., max_length=50, min_length=0)


class StartAssessmentRunRequest(BaseModel):
    assessmentRunName: Optional[AssessmentRunName] = None
    assessmentTemplateArn: Arn


class StartAssessmentRunResponse(BaseModel):
    assessmentRunArn: Arn


class StopAction(Enum):
    START_EVALUATION = 'START_EVALUATION'
    SKIP_EVALUATION = 'SKIP_EVALUATION'


class StopAssessmentRunRequest(BaseModel):
    assessmentRunArn: Arn
    stopAction: Optional[StopAction] = None


class SubscribeToEventRequest(BaseModel):
    event: InspectorEvent
    resourceArn: Arn
    topicArn: Arn


class TagKey(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class TagValue(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class TelemetryMetadata(BaseModel):
    count: Long
    dataSize: Optional[Long] = None
    messageType: MessageType


class TelemetryMetadataList(RootModel[List[TelemetryMetadata]]):
    root: List[TelemetryMetadata] = Field(..., max_length=5000, min_length=0)


class Text(RootModel[constr(min_length=0, max_length=20000)]):
    root: constr(min_length=0, max_length=20000)


class Timestamp(RootModel[datetime]):
    root: datetime


class TimestampRange(BaseModel):
    beginDate: Optional[Timestamp] = None
    endDate: Optional[Timestamp] = None


class UUID(
    RootModel[
        constr(pattern=r'[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}')
    ]
):
    root: constr(
        pattern=r'[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'
    )


class UnsubscribeFromEventRequest(BaseModel):
    event: InspectorEvent
    resourceArn: Arn
    topicArn: Arn


class UnsupportedFeatureException(RootModel[Any]):
    root: Any


class UpdateAssessmentTargetRequest(BaseModel):
    assessmentTargetArn: Arn
    assessmentTargetName: AssessmentTargetName
    resourceGroupArn: Optional[Arn] = None


class Url(RootModel[constr(max_length=2048)]):
    root: constr(max_length=2048)


class UserAttributeKeyList(RootModel[List[AttributeKey]]):
    root: List[AttributeKey] = Field(..., max_length=10, min_length=0)


class Version(RootModel[constr(min_length=0, max_length=1000)]):
    root: constr(min_length=0, max_length=1000)


class XAmzTarget(Enum):
    InspectorService_AddAttributesToFindings = (
        'InspectorService.AddAttributesToFindings'
    )


class XAmzTarget1(Enum):
    InspectorService_CreateAssessmentTarget = 'InspectorService.CreateAssessmentTarget'


class XAmzTarget2(Enum):
    InspectorService_CreateAssessmentTemplate = (
        'InspectorService.CreateAssessmentTemplate'
    )


class XAmzTarget3(Enum):
    InspectorService_CreateExclusionsPreview = (
        'InspectorService.CreateExclusionsPreview'
    )


class XAmzTarget4(Enum):
    InspectorService_CreateResourceGroup = 'InspectorService.CreateResourceGroup'


class XAmzTarget5(Enum):
    InspectorService_DeleteAssessmentRun = 'InspectorService.DeleteAssessmentRun'


class XAmzTarget6(Enum):
    InspectorService_DeleteAssessmentTarget = 'InspectorService.DeleteAssessmentTarget'


class XAmzTarget7(Enum):
    InspectorService_DeleteAssessmentTemplate = (
        'InspectorService.DeleteAssessmentTemplate'
    )


class XAmzTarget8(Enum):
    InspectorService_DescribeAssessmentRuns = 'InspectorService.DescribeAssessmentRuns'


class XAmzTarget9(Enum):
    InspectorService_DescribeAssessmentTargets = (
        'InspectorService.DescribeAssessmentTargets'
    )


class XAmzTarget10(Enum):
    InspectorService_DescribeAssessmentTemplates = (
        'InspectorService.DescribeAssessmentTemplates'
    )


class XAmzTarget11(Enum):
    InspectorService_DescribeCrossAccountAccessRole = (
        'InspectorService.DescribeCrossAccountAccessRole'
    )


class XAmzTarget12(Enum):
    InspectorService_DescribeExclusions = 'InspectorService.DescribeExclusions'


class XAmzTarget13(Enum):
    InspectorService_DescribeFindings = 'InspectorService.DescribeFindings'


class XAmzTarget14(Enum):
    InspectorService_DescribeResourceGroups = 'InspectorService.DescribeResourceGroups'


class XAmzTarget15(Enum):
    InspectorService_DescribeRulesPackages = 'InspectorService.DescribeRulesPackages'


class XAmzTarget16(Enum):
    InspectorService_GetAssessmentReport = 'InspectorService.GetAssessmentReport'


class XAmzTarget17(Enum):
    InspectorService_GetExclusionsPreview = 'InspectorService.GetExclusionsPreview'


class XAmzTarget18(Enum):
    InspectorService_GetTelemetryMetadata = 'InspectorService.GetTelemetryMetadata'


class XAmzTarget19(Enum):
    InspectorService_ListAssessmentRunAgents = (
        'InspectorService.ListAssessmentRunAgents'
    )


class XAmzTarget20(Enum):
    InspectorService_ListAssessmentRuns = 'InspectorService.ListAssessmentRuns'


class XAmzTarget21(Enum):
    InspectorService_ListAssessmentTargets = 'InspectorService.ListAssessmentTargets'


class XAmzTarget22(Enum):
    InspectorService_ListAssessmentTemplates = (
        'InspectorService.ListAssessmentTemplates'
    )


class XAmzTarget23(Enum):
    InspectorService_ListEventSubscriptions = 'InspectorService.ListEventSubscriptions'


class XAmzTarget24(Enum):
    InspectorService_ListExclusions = 'InspectorService.ListExclusions'


class XAmzTarget25(Enum):
    InspectorService_ListFindings = 'InspectorService.ListFindings'


class XAmzTarget26(Enum):
    InspectorService_ListRulesPackages = 'InspectorService.ListRulesPackages'


class XAmzTarget27(Enum):
    InspectorService_ListTagsForResource = 'InspectorService.ListTagsForResource'


class XAmzTarget28(Enum):
    InspectorService_PreviewAgents = 'InspectorService.PreviewAgents'


class XAmzTarget29(Enum):
    InspectorService_RegisterCrossAccountAccessRole = (
        'InspectorService.RegisterCrossAccountAccessRole'
    )


class XAmzTarget30(Enum):
    InspectorService_RemoveAttributesFromFindings = (
        'InspectorService.RemoveAttributesFromFindings'
    )


class XAmzTarget31(Enum):
    InspectorService_SetTagsForResource = 'InspectorService.SetTagsForResource'


class XAmzTarget32(Enum):
    InspectorService_StartAssessmentRun = 'InspectorService.StartAssessmentRun'


class XAmzTarget33(Enum):
    InspectorService_StopAssessmentRun = 'InspectorService.StopAssessmentRun'


class XAmzTarget34(Enum):
    InspectorService_SubscribeToEvent = 'InspectorService.SubscribeToEvent'


class XAmzTarget35(Enum):
    InspectorService_UnsubscribeFromEvent = 'InspectorService.UnsubscribeFromEvent'


class XAmzTarget36(Enum):
    InspectorService_UpdateAssessmentTarget = 'InspectorService.UpdateAssessmentTarget'


class AddRemoveAttributesFindingArnList(RootModel[List[Arn]]):
    root: List[Arn] = Field(..., max_length=10, min_length=1)


class AgentFilter(BaseModel):
    agentHealthCodes: AgentHealthCodeList
    agentHealths: AgentHealthList


class AgentPreview(BaseModel):
    agentHealth: Optional[AgentHealth] = None
    agentId: AgentId
    agentVersion: Optional[AgentVersion] = None
    autoScalingGroup: Optional[AutoScalingGroup] = None
    hostname: Optional[Hostname] = None
    ipv4Address: Optional[Ipv4Address] = None
    kernelVersion: Optional[KernelVersion] = None
    operatingSystem: Optional[OperatingSystem] = None


class AgentPreviewList(RootModel[List[AgentPreview]]):
    root: List[AgentPreview] = Field(..., max_length=100, min_length=0)


class AssessmentRunAgent(BaseModel):
    agentHealth: AgentHealth
    agentHealthCode: AgentHealthCode
    agentHealthDetails: Optional[Message] = None
    agentId: AgentId
    assessmentRunArn: Arn
    autoScalingGroup: Optional[AutoScalingGroup] = None
    telemetryMetadata: TelemetryMetadataList


class AssessmentRunAgentList(RootModel[List[AssessmentRunAgent]]):
    root: List[AssessmentRunAgent] = Field(..., max_length=500, min_length=0)


class AssessmentRunFilter(BaseModel):
    completionTimeRange: Optional[TimestampRange] = None
    durationRange: Optional[DurationRange] = None
    namePattern: Optional[NamePattern] = None
    rulesPackageArns: Optional[FilterRulesPackageArnList] = None
    startTimeRange: Optional[TimestampRange] = None
    stateChangeTimeRange: Optional[TimestampRange] = None
    states: Optional[AssessmentRunStateList] = None


class AssessmentRunFindingCounts(RootModel[Optional[Dict[str, FindingCount]]]):
    root: Optional[Dict[str, FindingCount]] = None


class AssessmentRunNotification(BaseModel):
    date: Timestamp
    error: Bool
    event: InspectorEvent
    message: Optional[Message] = None
    snsPublishStatusCode: Optional[AssessmentRunNotificationSnsStatusCode] = None
    snsTopicArn: Optional[Arn] = None


class AssessmentRunNotificationList(RootModel[List[AssessmentRunNotification]]):
    root: List[AssessmentRunNotification] = Field(..., max_length=50, min_length=0)


class AssessmentRunStateChange(BaseModel):
    state: AssessmentRunState
    stateChangedAt: Timestamp


class AssessmentRunStateChangeList(RootModel[List[AssessmentRunStateChange]]):
    root: List[AssessmentRunStateChange] = Field(..., max_length=50, min_length=0)


class AssessmentTarget(BaseModel):
    arn: Arn
    createdAt: Timestamp
    name: AssessmentTargetName
    resourceGroupArn: Optional[Arn] = None
    updatedAt: Timestamp


class AssessmentTargetFilter(BaseModel):
    assessmentTargetNamePattern: Optional[NamePattern] = None


class AssessmentTargetList(RootModel[List[AssessmentTarget]]):
    root: List[AssessmentTarget] = Field(..., max_length=10, min_length=0)


class AssessmentTemplateFilter(BaseModel):
    durationRange: Optional[DurationRange] = None
    namePattern: Optional[NamePattern] = None
    rulesPackageArns: Optional[FilterRulesPackageArnList] = None


class Attribute(BaseModel):
    key: AttributeKey
    value: Optional[AttributeValue] = None


class AttributeList(RootModel[List[Attribute]]):
    root: List[Attribute] = Field(..., max_length=50, min_length=0)


class CreateExclusionsPreviewResponse(BaseModel):
    previewToken: UUID


class DescribeCrossAccountAccessRoleResponse(BaseModel):
    registeredAt: Timestamp
    roleArn: Arn
    valid: Bool


class DescribeExclusionsRequest(BaseModel):
    exclusionArns: BatchDescribeExclusionsArnList
    locale: Optional[Locale] = None


class DescribeFindingsRequest(BaseModel):
    findingArns: BatchDescribeArnList
    locale: Optional[Locale] = None


class DescribeRulesPackagesRequest(BaseModel):
    locale: Optional[Locale] = None
    rulesPackageArns: BatchDescribeArnList


class EventSubscription(BaseModel):
    event: InspectorEvent
    subscribedAt: Timestamp


class EventSubscriptionList(RootModel[List[EventSubscription]]):
    root: List[EventSubscription] = Field(..., max_length=50, min_length=1)


class FailedItemDetails(BaseModel):
    failureCode: FailedItemErrorCode
    retryable: Bool


class FailedItems(RootModel[Optional[Dict[str, FailedItemDetails]]]):
    root: Optional[Dict[str, FailedItemDetails]] = None


class FindingFilter(BaseModel):
    agentIds: Optional[AgentIdList] = None
    attributes: Optional[AttributeList] = None
    autoScalingGroups: Optional[AutoScalingGroupList] = None
    creationTimeRange: Optional[TimestampRange] = None
    ruleNames: Optional[RuleNameList] = None
    rulesPackageArns: Optional[FilterRulesPackageArnList] = None
    severities: Optional[SeverityList] = None
    userAttributes: Optional[AttributeList] = None


class GetAssessmentReportRequest(BaseModel):
    assessmentRunArn: Arn
    reportFileFormat: ReportFileFormat
    reportType: ReportType


class GetAssessmentReportResponse(BaseModel):
    status: ReportStatus
    url: Optional[Url] = None


class GetExclusionsPreviewRequest(BaseModel):
    assessmentTemplateArn: Arn
    locale: Optional[Locale] = None
    maxResults: Optional[ListMaxResults] = None
    nextToken: Optional[PaginationToken] = None
    previewToken: UUID


class GetTelemetryMetadataResponse(BaseModel):
    telemetryMetadata: TelemetryMetadataList


class InspectorServiceAttributes(BaseModel):
    assessmentRunArn: Optional[Arn] = None
    rulesPackageArn: Optional[Arn] = None
    schemaVersion: NumericVersion


class Ipv6Addresses(RootModel[List[Text]]):
    root: List[Text]


class ListAssessmentRunAgentsRequest(BaseModel):
    assessmentRunArn: Arn
    filter: Optional[AgentFilter] = None
    maxResults: Optional[ListMaxResults] = None
    nextToken: Optional[PaginationToken] = None


class ListAssessmentRunAgentsResponse(BaseModel):
    assessmentRunAgents: AssessmentRunAgentList
    nextToken: Optional[PaginationToken] = None


class ListAssessmentRunsRequest(BaseModel):
    assessmentTemplateArns: Optional[ListParentArnList] = None
    filter: Optional[AssessmentRunFilter] = None
    maxResults: Optional[ListMaxResults] = None
    nextToken: Optional[PaginationToken] = None


class ListAssessmentRunsResponse(BaseModel):
    assessmentRunArns: ListReturnedArnList
    nextToken: Optional[PaginationToken] = None


class ListAssessmentTargetsRequest(BaseModel):
    filter: Optional[AssessmentTargetFilter] = None
    maxResults: Optional[ListMaxResults] = None
    nextToken: Optional[PaginationToken] = None


class ListAssessmentTargetsResponse(BaseModel):
    assessmentTargetArns: ListReturnedArnList
    nextToken: Optional[PaginationToken] = None


class ListAssessmentTemplatesRequest(BaseModel):
    assessmentTargetArns: Optional[ListParentArnList] = None
    filter: Optional[AssessmentTemplateFilter] = None
    maxResults: Optional[ListMaxResults] = None
    nextToken: Optional[PaginationToken] = None


class ListAssessmentTemplatesResponse(BaseModel):
    assessmentTemplateArns: ListReturnedArnList
    nextToken: Optional[PaginationToken] = None


class ListEventSubscriptionsRequest(BaseModel):
    maxResults: Optional[ListEventSubscriptionsMaxResults] = None
    nextToken: Optional[PaginationToken] = None
    resourceArn: Optional[Arn] = None


class ListExclusionsRequest(BaseModel):
    assessmentRunArn: Arn
    maxResults: Optional[ListMaxResults] = None
    nextToken: Optional[PaginationToken] = None


class ListExclusionsResponse(BaseModel):
    exclusionArns: ListReturnedArnList
    nextToken: Optional[PaginationToken] = None


class ListFindingsRequest(BaseModel):
    assessmentRunArns: Optional[ListParentArnList] = None
    filter: Optional[FindingFilter] = None
    maxResults: Optional[ListMaxResults] = None
    nextToken: Optional[PaginationToken] = None


class ListFindingsResponse(BaseModel):
    findingArns: ListReturnedArnList
    nextToken: Optional[PaginationToken] = None


class ListRulesPackagesRequest(BaseModel):
    maxResults: Optional[ListMaxResults] = None
    nextToken: Optional[PaginationToken] = None


class ListRulesPackagesResponse(BaseModel):
    nextToken: Optional[PaginationToken] = None
    rulesPackageArns: ListReturnedArnList


class PreviewAgentsResponse(BaseModel):
    agentPreviews: AgentPreviewList
    nextToken: Optional[PaginationToken] = None


class PrivateIp(BaseModel):
    privateDnsName: Optional[Text] = None
    privateIpAddress: Optional[Text] = None


class PrivateIpAddresses(RootModel[List[PrivateIp]]):
    root: List[PrivateIp]


class RemoveAttributesFromFindingsRequest(BaseModel):
    attributeKeys: UserAttributeKeyList
    findingArns: AddRemoveAttributesFindingArnList


class RemoveAttributesFromFindingsResponse(BaseModel):
    failedItems: FailedItems


class ResourceGroupTag(BaseModel):
    key: TagKey
    value: Optional[TagValue] = None


class ResourceGroupTags(RootModel[List[ResourceGroupTag]]):
    root: List[ResourceGroupTag] = Field(..., max_length=10, min_length=1)


class RulesPackage(BaseModel):
    arn: Arn
    description: Optional[Text] = None
    name: RulesPackageName
    provider: ProviderName
    version: Version


class RulesPackageList(RootModel[List[RulesPackage]]):
    root: List[RulesPackage] = Field(..., max_length=10, min_length=0)


class Scope(BaseModel):
    key: Optional[ScopeType] = None
    value: Optional[ScopeValue] = None


class ScopeList(RootModel[List[Scope]]):
    root: List[Scope] = Field(..., min_length=1)


class SecurityGroup(BaseModel):
    groupId: Optional[Text] = None
    groupName: Optional[Text] = None


class SecurityGroups(RootModel[List[SecurityGroup]]):
    root: List[SecurityGroup]


class Subscription(BaseModel):
    eventSubscriptions: EventSubscriptionList
    resourceArn: Arn
    topicArn: Arn


class SubscriptionList(RootModel[List[Subscription]]):
    root: List[Subscription] = Field(..., max_length=50, min_length=0)


class Tag(BaseModel):
    key: TagKey
    value: Optional[TagValue] = None


class TagList(RootModel[List[Tag]]):
    root: List[Tag] = Field(..., max_length=10, min_length=0)


class Tags(RootModel[List[Tag]]):
    root: List[Tag]


class UserAttributeList(RootModel[List[Attribute]]):
    root: List[Attribute] = Field(..., max_length=10, min_length=0)


class AddAttributesToFindingsRequest(BaseModel):
    attributes: UserAttributeList
    findingArns: AddRemoveAttributesFindingArnList


class AddAttributesToFindingsResponse(BaseModel):
    failedItems: FailedItems


class AssessmentRun(BaseModel):
    arn: Arn
    assessmentTemplateArn: Arn
    completedAt: Optional[Timestamp] = None
    createdAt: Timestamp
    dataCollected: Bool
    durationInSeconds: AssessmentRunDuration
    findingCounts: AssessmentRunFindingCounts
    name: AssessmentRunName
    notifications: AssessmentRunNotificationList
    rulesPackageArns: AssessmentRulesPackageArnList
    startedAt: Optional[Timestamp] = None
    state: AssessmentRunState
    stateChangedAt: Timestamp
    stateChanges: AssessmentRunStateChangeList
    userAttributesForFindings: UserAttributeList


class AssessmentRunList(RootModel[List[AssessmentRun]]):
    root: List[AssessmentRun] = Field(..., max_length=10, min_length=0)


class AssessmentTemplate(BaseModel):
    arn: Arn
    assessmentRunCount: ArnCount
    assessmentTargetArn: Arn
    createdAt: Timestamp
    durationInSeconds: AssessmentRunDuration
    lastAssessmentRunArn: Optional[Arn] = None
    name: AssessmentTemplateName
    rulesPackageArns: AssessmentTemplateRulesPackageArnList
    userAttributesForFindings: UserAttributeList


class AssessmentTemplateList(RootModel[List[AssessmentTemplate]]):
    root: List[AssessmentTemplate] = Field(..., max_length=10, min_length=0)


class CreateAssessmentTemplateRequest(BaseModel):
    assessmentTargetArn: Arn
    assessmentTemplateName: AssessmentTemplateName
    durationInSeconds: AssessmentRunDuration
    rulesPackageArns: AssessmentTemplateRulesPackageArnList
    userAttributesForFindings: Optional[UserAttributeList] = None


class CreateResourceGroupRequest(BaseModel):
    resourceGroupTags: ResourceGroupTags


class DescribeAssessmentRunsResponse(BaseModel):
    assessmentRuns: AssessmentRunList
    failedItems: FailedItems


class DescribeAssessmentTargetsResponse(BaseModel):
    assessmentTargets: AssessmentTargetList
    failedItems: FailedItems


class DescribeAssessmentTemplatesResponse(BaseModel):
    assessmentTemplates: AssessmentTemplateList
    failedItems: FailedItems


class DescribeRulesPackagesResponse(BaseModel):
    failedItems: FailedItems
    rulesPackages: RulesPackageList


class Exclusion(BaseModel):
    arn: Arn
    attributes: Optional[AttributeList] = None
    description: Text
    recommendation: Text
    scopes: ScopeList
    title: Text


class ExclusionMap(RootModel[Optional[Dict[str, Exclusion]]]):
    root: Optional[Dict[str, Exclusion]] = None


class ExclusionPreview(BaseModel):
    attributes: Optional[AttributeList] = None
    description: Text
    recommendation: Text
    scopes: ScopeList
    title: Text


class ExclusionPreviewList(RootModel[List[ExclusionPreview]]):
    root: List[ExclusionPreview] = Field(..., max_length=100, min_length=0)


class GetExclusionsPreviewResponse(BaseModel):
    exclusionPreviews: Optional[ExclusionPreviewList] = None
    nextToken: Optional[PaginationToken] = None
    previewStatus: PreviewStatus


class ListEventSubscriptionsResponse(BaseModel):
    nextToken: Optional[PaginationToken] = None
    subscriptions: SubscriptionList


class ListTagsForResourceResponse(BaseModel):
    tags: TagList


class NetworkInterface(BaseModel):
    ipv6Addresses: Optional[Ipv6Addresses] = None
    networkInterfaceId: Optional[Text] = None
    privateDnsName: Optional[Text] = None
    privateIpAddress: Optional[Text] = None
    privateIpAddresses: Optional[PrivateIpAddresses] = None
    publicDnsName: Optional[Text] = None
    publicIp: Optional[Text] = None
    securityGroups: Optional[SecurityGroups] = None
    subnetId: Optional[Text] = None
    vpcId: Optional[Text] = None


class NetworkInterfaces(RootModel[List[NetworkInterface]]):
    root: List[NetworkInterface]


class ResourceGroup(BaseModel):
    arn: Arn
    createdAt: Timestamp
    tags: ResourceGroupTags


class ResourceGroupList(RootModel[List[ResourceGroup]]):
    root: List[ResourceGroup] = Field(..., max_length=10, min_length=0)


class SetTagsForResourceRequest(BaseModel):
    resourceArn: Arn
    tags: Optional[TagList] = None


class AssetAttributes(BaseModel):
    agentId: Optional[AgentId] = None
    amiId: Optional[AmiId] = None
    autoScalingGroup: Optional[AutoScalingGroup] = None
    hostname: Optional[Hostname] = None
    ipv4Addresses: Optional[Ipv4AddressList] = None
    networkInterfaces: Optional[NetworkInterfaces] = None
    schemaVersion: NumericVersion
    tags: Optional[Tags] = None


class DescribeExclusionsResponse(BaseModel):
    exclusions: ExclusionMap
    failedItems: FailedItems


class DescribeResourceGroupsResponse(BaseModel):
    failedItems: FailedItems
    resourceGroups: ResourceGroupList


class Finding(BaseModel):
    arn: Arn
    assetAttributes: Optional[AssetAttributes] = None
    assetType: Optional[AssetType] = None
    attributes: AttributeList
    confidence: Optional[IocConfidence] = None
    createdAt: Timestamp
    description: Optional[Text] = None
    id: Optional[FindingId] = None
    indicatorOfCompromise: Optional[Bool] = None
    numericSeverity: Optional[NumericSeverity] = None
    recommendation: Optional[Text] = None
    schemaVersion: Optional[NumericVersion] = None
    service: Optional[ServiceName] = None
    serviceAttributes: Optional[InspectorServiceAttributes] = None
    severity: Optional[Severity] = None
    title: Optional[Text] = None
    updatedAt: Timestamp
    userAttributes: UserAttributeList


class FindingList(RootModel[List[Finding]]):
    root: List[Finding] = Field(..., max_length=100, min_length=0)


class DescribeFindingsResponse(BaseModel):
    failedItems: FailedItems
    findings: FindingList
